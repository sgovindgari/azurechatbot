{"version":3,"sources":["WebPage.jpg","WebChat.js","MinimizableWebChat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createDirectLine","memoize","token","state","styleSet","createStyleSet","onFetchToken","_this$props","className","store","react_default","a","createElement","lib_default","concat","directLine","React","Component","handleFetchToken","bind","assertThisInitialized","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","createStore","_ref","dispatch","next","action","type","setTimeout","payload","name","value","language","window","navigator","activity","from","role","setState","newMessage","minimized","side","backgroundColor","fetch","method","res","json","_ref3","_this$state","onClick","src_WebChat_default","App","src_MinimizableWebChat_default","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+QCOtC,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,iBAAmBC,kBAAQ,SAAAC,GAAK,OAAIF,2BAAiB,CAAEE,MAAO,2JAEnET,EAAKU,MAAQ,CACXC,SAAUC,yBAAe,KANVZ,oFAYhBG,KAAKJ,MAAMU,OAASN,KAAKJ,MAAMc,gDAGzB,IAAAC,EAIHX,KAFFJ,MAASgB,EAFJD,EAEIC,UAAWC,EAFfF,EAEeE,MAAOP,EAFtBK,EAEsBL,MAClBE,EACPR,KADFO,MAASC,SAGX,OACEF,EACEQ,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACEH,UAAS,GAAAM,OAAON,GAAa,GAApB,aACTO,WAAanB,KAAKI,iBAAiBE,GACnCO,MAAQA,EACRL,SAAWA,IAGbM,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,GAAAM,OAAON,GAAa,GAApB,qBACZE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,WACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,QACbE,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,4BAElBE,EAAAC,EAAAC,cAAA,0DApCiBI,IAAMC,2CCGjC,SAAA1B,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAED0B,iBAAmBzB,EAAKyB,iBAAiBC,KAAtBzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAD,KACxBA,EAAK4B,0BAA4B5B,EAAK4B,0BAA0BF,KAA/BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAD,KACjCA,EAAK6B,0BAA4B7B,EAAK6B,0BAA0BH,KAA/BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAD,KACjCA,EAAK8B,wBAA0B9B,EAAK8B,wBAAwBJ,KAA7BzB,OAAA0B,EAAA,EAAA1B,QAAA0B,EAAA,EAAA1B,CAAAD,KAE/B,IAAMgB,EAAQe,sBAAY,GAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAAkB,SAAAC,GAAI,OAAI,SAAAC,GAmBtD,MAlBoB,kCAAhBA,EAAOC,KACTC,WAAW,WACTJ,EAAS,CACPG,KAAM,sBACNE,QAAS,CACPC,KAAM,eACNC,MAAO,CACLC,SAAUC,OAAOC,UAAUF,cAIhC,KACsB,kCAAhBN,EAAOC,MAC0B,QAAtCD,EAAOG,QAAQM,SAASC,KAAKC,MAC/B9C,EAAK+C,SAAS,iBAAO,CAAEC,YAAY,KAIhCd,EAAKC,OA3BG,OA8BjBnC,EAAKU,MAAQ,CACXuC,WAAW,EACXD,YAAY,EACZE,KAAM,QACNlC,QACAL,SAAUC,yBAAe,CACvBuC,gBAAiB,gBAEnB1C,MAAO,MAtCQT,uMA2CZG,KAAKO,MAAMD,sCACI2C,MAAM,6DAA8D,CAAEC,OAAQ,uBAA1FC,kBACkBA,EAAIC,uBAApB9C,UAERN,KAAK4C,SAAS,iBAAO,CAAEtC,iKAKzBN,KAAK4C,SAAS,iBAAO,CACnBE,WAAW,EACXD,YAAY,yDAKd7C,KAAK4C,SAAS,iBAAO,CACnBE,WAAW,EACXD,YAAY,uDAKd7C,KAAK4C,SAAS,SAAAS,GAAA,MAAe,CAC3BN,KAAe,SADHM,EAAGN,KACS,QAAU,2CAI7B,IAAAO,EAQDtD,KAPEO,MACNuC,EAFKQ,EAELR,UACAD,EAHKS,EAGLT,WACAE,EAJKO,EAILP,KACAlC,EALKyC,EAKLzC,MACAL,EANK8C,EAML9C,SACAF,EAPKgD,EAOLhD,MAGF,OACEQ,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,wBAEXkC,EACEhC,EAAAC,EAAAC,cAAA,UACEJ,UAAU,WACV2C,QAAUvD,KAAKyB,2BAEfX,EAAAC,EAAAC,cAAA,QAAMJ,UAAYN,EAAQ,+BAAiC,6BAEzDuC,GACE/B,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,+CAItBE,EAAAC,EAAAC,cAAA,OACEJ,UAAqB,SAATmC,EAAkB,gBAAkB,kBAEhDjC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,WACfE,EAAAC,EAAAC,cAAA,UACEJ,UAAU,SACV2C,QAAUvD,KAAK2B,yBAEfb,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,6BAElBE,EAAAC,EAAAC,cAAA,UACEJ,UAAU,WACV2C,QAAUvD,KAAK0B,2BAEfZ,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,sCAGpBE,EAAAC,EAAAC,cAACwC,EAAD,CACE5C,UAAU,iBACVF,aAAeV,KAAKsB,iBACpBT,MAAQA,EACRL,SAAWA,EACXF,MAAQA,aAxHKc,IAAMC,YCQpBoC,oMARX,OACE3C,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,OACbE,EAAAC,EAAAC,cAAC0C,EAAD,cAJUrC,cCMEsC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb5fb66e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WebPage.d6d7485a.jpg\";","import memoize from 'memoize-one';\nimport React from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\n\nimport './WebChat.css';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.createDirectLine = memoize(token => createDirectLine({ token: \"yBAq-XoF_kE.dAA.RgA3AGcAVgBsAG0ASwBFAEgAdQBTAEEAbgBrAHIATwBrADkASQAyAGMASQAtAGcA.XeN857vt1AE.x2bv3sy5rn4.JGsP7ljaEqQvtjE6fa-zHxDPPIl-qxJ8q-oytgxNG5c\" }));\n\n    this.state = {\n      styleSet: createStyleSet({\n      })\n    };\n  }\n\n  componentDidMount() {\n    !this.props.token && this.props.onFetchToken();\n  }\n\n  render() {\n    const {\n      props: { className, store, token },\n      state: { styleSet }\n    } = this;\n\n    return (\n      token ?\n        <ReactWebChat\n          className={ `${ className || '' } web-chat` }\n          directLine={ this.createDirectLine(token) }\n          store={ store }\n          styleSet={ styleSet }\n        />\n      :\n        <div className={ `${ className || '' } connect-spinner` }>\n          <div className=\"content\">\n            <div className=\"icon\">\n              <span className=\"ms-Icon ms-Icon--Robot\" />\n            </div>\n            <p>Please wait while we are connecting.</p>\n          </div>\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\n\nimport './fabric-icons-inline.css';\nimport './MinimizableWebChat.css';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFetchToken = this.handleFetchToken.bind(this);\n    this.handleMaximizeButtonClick = this.handleMaximizeButtonClick.bind(this);\n    this.handleMinimizeButtonClick = this.handleMinimizeButtonClick.bind(this);\n    this.handleSwitchButtonClick = this.handleSwitchButtonClick.bind(this);\n\n    const store = createStore({}, ({ dispatch }) => next => action => {\n      if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n        setTimeout(() => {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        }, 1000);\n      } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n        if (action.payload.activity.from.role === 'bot') {\n          this.setState(() => ({ newMessage: true }));\n        }\n      }\n\n      return next(action);\n    });\n\n    this.state = {\n      minimized: true,\n      newMessage: false,\n      side: 'right',\n      store,\n      styleSet: createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n      token: null\n    };\n  }\n\n  async handleFetchToken() {\n    if (!this.state.token) {\n      const res = await fetch('https://webchat-mockbot.azurewebsites.net/directline/token', { method: 'POST' });\n      const { token } = await res.json();\n\n      this.setState(() => ({ token }));\n    }\n  }\n\n  handleMaximizeButtonClick() {\n    this.setState(() => ({\n      minimized: false,\n      newMessage: false\n    }));\n  }\n\n  handleMinimizeButtonClick() {\n    this.setState(() => ({\n      minimized: true,\n      newMessage: false\n    }));\n  }\n\n  handleSwitchButtonClick() {\n    this.setState(({ side }) => ({\n      side: side === 'left' ? 'right' : 'left'\n    }));\n  }\n\n  render() {\n    const { state: {\n      minimized,\n      newMessage,\n      side,\n      store,\n      styleSet,\n      token\n    } } = this;\n\n    return (\n      <div className=\"minimizable-web-chat\">\n        {\n          minimized ?\n            <button\n              className=\"maximize\"\n              onClick={ this.handleMaximizeButtonClick }\n            >\n              <span className={ token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message' } />\n              {\n                newMessage &&\n                  <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />\n              }\n            </button>\n          :\n            <div\n              className={ side === 'left' ? 'chat-box left' : 'chat-box right' }\n            >\n              <header>\n                <div className=\"filler\" />\n                <button\n                  className=\"switch\"\n                  onClick={ this.handleSwitchButtonClick }\n                >\n                  <span className=\"ms-Icon ms-Icon--Switch\" />\n                </button>\n                <button\n                  className=\"minimize\"\n                  onClick={ this.handleMinimizeButtonClick }\n                >\n                  <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n                </button>\n              </header>\n              <WebChat\n                className=\"react-web-chat\"\n                onFetchToken={ this.handleFetchToken }\n                store={ store }\n                styleSet={ styleSet }\n                token={ token }\n              />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport MinimizableWebChat from './MinimizableWebChat';\n\nimport WebPageBackground from './WebPage.jpg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MinimizableWebChat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}